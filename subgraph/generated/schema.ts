// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class WhitelistedAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WhitelistedAddress entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WhitelistedAddress entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WhitelistedAddress", id.toString(), this);
  }

  static load(id: string): WhitelistedAddress | null {
    return store.get("WhitelistedAddress", id) as WhitelistedAddress | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get activeAfter(): BigInt {
    let value = this.get("activeAfter");
    return value.toBigInt();
  }

  set activeAfter(value: BigInt) {
    this.set("activeAfter", Value.fromBigInt(value));
  }

  get wallet(): string {
    let value = this.get("wallet");
    return value.toString();
  }

  set wallet(value: string) {
    this.set("wallet", Value.fromString(value));
  }
}

export class Wallet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Wallet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Wallet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Wallet", id.toString(), this);
  }

  static load(id: string): Wallet | null {
    return store.get("Wallet", id) as Wallet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get whitelist(): Array<string> | null {
    let value = this.get("whitelist");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set whitelist(value: Array<string> | null) {
    if (value === null) {
      this.unset("whitelist");
    } else {
      this.set("whitelist", Value.fromStringArray(value as Array<string>));
    }
  }
}
